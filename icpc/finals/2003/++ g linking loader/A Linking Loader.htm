<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1"><title>2727 - A Linking Loader</title></head><body><table align="center" border="1" cellpadding="3" cellspacing="0"><tbody><tr valign="center"><td rowspan="2" align="center" valign="center"><font color="#0000a0" size="5"><b><img src="A%20Linking%20Loader_files/icono.gif"></b></font></td><td colspan="5" align="center" width="500"><font color="#0000a0" size="5"><b>2727 - A Linking Loader</b></font><br><a href="http://acmicpc-live-archive.uva.es/nuevoportal/region.php?r=wfi&amp;year=2002"><b>World Finals - Beverly Hills - 2002/2003</b></a></td></tr><tr valign="center"><td align="center" width="100"><a href="http://acmicpc-live-archive.uva.es/nuevoportal/data/p2727.pdf"><b>PDF</b></a></td><td width="100">&nbsp;</td><td align="center" width="100"><a href="http://acmicpc-live-archive.uva.es/nuevoportal/mailer.php?problem=2727"><b>Submit</b></a></td><td width="100">&nbsp;</td><td align="center" width="100"><a href="http://acmicpc-live-archive.uva.es/nuevoportal/rankprob.php?p=2727"><b>Ranking</b></a></td></tr></tbody></table><p>&nbsp;</p><p>
An <em>object module</em> is produced by a compiler as a result of processing a source program.
A <em>linking loader</em> (or just a
<em>linker</em>) is used to combine the multiple object modules used when a program contains
several separately compiled
modules. Two of its primary tasks are to relocate the code and data in each
object module (since the compiler does
not know where in memory a module will be placed), and to resolve symbolic references
from one module to
another. For example, a main program may reference a square root function called
<tt>sqrt</tt>, and that function may be
defined in a separate source module. The linker will then minimally have to
assign addresses to the code and data in
each module, and put the address of the <tt>sqrt</tt> function in the appropriate location(s)
in the main module's code.

</p><p>
An object module contains (in order) zero or more <em>external symbol definitions</em>,
zero or more <em>external symbol
references</em>, zero or more bytes of code and data (that may include references to
the values of external symbols), and
an end of module marker. In this problem, an object module is represented as a
sequence of text lines, each
beginning with a single uppercase character that characterizes the remainder
of the line. The format of each of these
lines is as follows. Whitespace (one or more blanks and/or tab characters)
will appear between the fields in these
lines. Additional whitespace may follow the last field in each line.

</p><p>

</p><ul>
<li>A line of the form `<tt>D <span class="MATH"><i>symbol</i></span> <span class="MATH"><i>offset</i></span></tt>' is an external symbol definition.
It defines <span class="MATH"><i>symbol</i></span> as having the address
<span class="MATH"><i>offset</i></span> bytes greater than the address where the first byte of code and data for
the current object module is
located by the linker. A <span class="MATH"><i>symbol</i></span> is a string of no more than eight upper case
alphabetic characters. The <span class="MATH"><i>offset</i></span> is a
hexadecimal number with no more than four digits (using only upper case alphabetic
characters for the digits A
through F). For example, in a module that is loaded starting at the address 100<span class="MATH"><sub>16</sub></span>,
the line `<tt>D START 5C</tt>'
indicates that the symbol <tt>START</tt> is defined as being associated with the
address 15C<span class="MATH"><sub>16</sub></span>.
The number of ``D" lines in a test case is at most 100.

<p>

</p></li><li>A line of the form `<tt>E <span class="MATH"><i>symbol</i></span></tt>' is an external symbol reference, and indicates
that the value of <span class="MATH"><i>symbol</i></span>
(presumably defined in another object module) may be referenced as part of the
code and data for the current
module. For example, the line `<tt>E START</tt>' indicates that the value of the symbol
<tt>START</tt> (that is, the address
defined for it) may be used as part of the code and data for the module.
Each of the ``E" lines for each module is
numbered sequentially, starting with 0, so they can be referenced in the ``C" lines.

<p>

</p></li><li>A line of the form `<tt>C <!-- MATH
 $n\ byte_1\ byte_2\ \dots byte_n$
 -->
<span class="MATH"><i>n</i>&nbsp;<i>byte</i><sub>1</sub>&nbsp;<i>byte</i><sub>2</sub>&nbsp;...<i>byte</i><sub>n</sub></span></tt>' specifies the first or
next <span class="MATH"><i>n</i></span> bytes of code and data for the current
module. The value <span class="MATH"><i>n</i></span> is specified as a one or two digit hexadecimal number,
and will be no larger than 10
hexadecimal. Each <span class="MATH"><i>byte</i></span> is either a one or two digit hexadecimal number,
or a dollar sign. The first byte
following a dollar sign (always on the same line) gives the 0-origin index
of an external symbol reference for
this module, and identifies the symbol which is to have its 16-bit value
inserted at the current point in the linked
program (that is, in the location indicated by the dollar sign and the following byte).
The high-order byte is
placed in the location indicated by the dollar sign. The values specified for the
other bytes (those not following
a dollar sign) are loaded into sequential memory locations, starting with the first
(lowest) unused memory
location. For example, the line `<tt>C 4 25 $ 0 37</tt>' would cause the
values 25<span class="MATH"><sub>16</sub></span> 01<span class="MATH"><sub>16</sub></span> 5C<span class="MATH"><sub>16</sub></span> and 37<span class="MATH"><sub>16</sub></span> to be placed in
the next four unused memory locations, assuming the first ``E" line for the
current module specified a symbol
defined as having the address 15C<span class="MATH"><sub>16</sub></span>. If the 0-origin index of the external
symbol reference is an undefined
symbol, the 16-bit value inserted at the current point in the linked program
is 0000<span class="MATH"><sub>16</sub></span>.

<p>

</p></li><li>A line of the form `<tt>Z</tt>' marks the end of an object module.
</li>
</ul>

<p>
You may assume that no address requires more than four hexadecimal digits.
Lines are always given in the order
shown above. There are no syntax errors in the input.

</p><p>

</p><h2><font color="#ff0000" size="4"><a name="SECTION0001001000000000000000">
Input</a>&nbsp;</font>
</h2>
This problem has multiple input cases. The input for each case is one or more
object modules, in sequence, that are
to be linked, followed by a line beginning with a dollar sign. The first address
at which code is to be loaded in each
case is 100<span class="MATH"><sub>16</sub></span>.

<p>
The last case will be followed by a line containing only a dollar sign.

</p><p>

</p><h2><font color="#ff0000" size="4"><a name="SECTION0001002000000000000000">
Output</a>&nbsp;</font>
</h2>
For each case, print the case number (starting with 1), the 16-bit checksum of
the loaded bytes (as described below),
and the load map showing the address of each externally defined or referenced
symbol, in ascending order of
symbol name. For undefined symbols, print the value as four question marks,
but use zero as the symbol's value
when it is referenced in ``C" lines. If a symbol is defined more than once,
print `<tt>M</tt>' following the address shown in
the load map, and use the value from the first definition encountered in
any object module to satisfy external
references. Format the output exactly as shown in the samples.

<p>
The 16-bit checksum is computed by first setting it to zero. Then, for each
byte assigned to a memory location by
the loader, in increasing address order, circularly left shift the checksum by
one bit, and add the byte from the
memory location, discarding any carry out of the low-order 16 bits.

</p><p>Print a blank line between datasets.
</p><p>

</p><h2><font color="#ff0000" size="4"><a name="SECTION0001003000000000000000">
Sample Input</a>&nbsp;</font>
</h2>
<pre>D MAIN 0
D END 5
C 03 01 02 03
C 03 04 05 06
Z
$
D ENTRY 4
E SUBX
E SUBY
C 10 1 2 3 4 5 $ 0 6 7 8 9 A B C D E
C 8 10 20 30 40 50 60 70 80
C 8 90 A0 B0 C0 D0 E0 $ 1
C 5 $ 0 FF EE DD
Z
D SUBX 01
C 06 A B C D E F
Z
D SUBX 05
C 06 51 52 53 54 55 56
Z
$
$
</pre>

<p>

</p><h2><font color="#ff0000" size="4"><a name="SECTION0001004000000000000000">
Sample Output</a>&nbsp;</font>
</h2>
<pre>Case 1: checksum = 0078
 SYMBOL   ADDR
--------  ----
END       0105
MAIN      0100

Case 2: checksum = 548C
 SYMBOL   ADDR
--------  ----
ENTRY     0104
SUBX      0126 M
SUBY      ????
</pre>

<p>
</p><hr><address>Beverly Hills 2002-2003</address><p></p></body></html>