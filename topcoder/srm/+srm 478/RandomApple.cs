using System;
using System.Collections.Generic;

public class RandomApple
{
    private int parse(char c)
    {
        return int.Parse(c.ToString());
    }

    public double[] theProbability(string[] hundred, string[] ten, string[] one)
    {
        int nboxes = hundred.Length;
        int ntypes = hundred[0].Length;
        int[][] boxes = new int[nboxes][];
        int[] inbox = new int[nboxes];
        int nstates = 0;
        for (int box = 0; box < nboxes; ++box)
        {
            boxes[box] = new int[ntypes];
            for (int type = 0; type < ntypes; ++type)
            {
                boxes[box][type] = parse(hundred[box][type]) * 100 + parse(ten[box][type]) * 10 + parse(one[box][type]);
                inbox[box] += boxes[box][type];
            }
            nstates += inbox[box];
        }
        long nsets = ((long)1 << nboxes) - 1;
        double[] result = new double[ntypes];

        long[] dp = new long[nstates + 1];
        dp[0] = 1;
        for (int box = 0; box < nboxes; ++box)
            for (int state = nstates - inbox[box]; state >= 0; --state)
                dp[state + inbox[box]] += dp[state];

        long[] sub = new long[nstates + 1];
        for (int box = 0; box < nboxes; ++box)
        {
            Array.Copy(dp, sub, nstates);
            for (int state = inbox[box]; state <= nstates; ++state)
                sub[state] -= sub[state - inbox[box]];
            
            //sub[0] = 1;
            //for (int i = 0; i < nboxes; ++i)
            //    if (i != box)
            //        for (int state = nstates - inbox[i]; state >= 0; --state)
            //            sub[state + inbox[i]] += sub[state];

            double prob = 0.0;
            for (int state = inbox[box]; state <= nstates; ++state)
                prob += 1.0 * sub[state - inbox[box]] / state;

            for (int type = 0; type < ntypes; ++type)
                result[type] += boxes[box][type] * prob;
        }

        for (int i = 0; i < ntypes; ++i)
            result[i] /= nsets;
        return result;
    }

    // BEGIN CUT HERE
    public void run_test(int Case)
    {
        if ((Case == -1) || (Case == 0)) test_case_0();
        if ((Case == -1) || (Case == 1)) test_case_1();
        if ((Case == -1) || (Case == 2)) test_case_2();
        if ((Case == -1) || (Case == 3)) test_case_3();
        if ((Case == -1) || (Case == 4)) test_case_4();
        if ((Case == -1) || (Case == 5)) test_case_5();
        if ((Case == -1) || (Case == 6)) test_case_6();
    }
    private void verify_case(int Case, double[] Expected, double[] Received)
    {
        Console.Write("Test Case #" + Case + "...");
        if (equal_arrays(Expected, Received))
            Console.WriteLine("PASSED");
        else
        {
            Console.WriteLine("FAILED");
            Console.WriteLine("\tExpected: " + print_array(Expected));
            Console.WriteLine("\tReceived: " + print_array(Received));
        }
    }
    string print_array(double[] V)
    {
        System.Text.StringBuilder builder = new System.Text.StringBuilder();
        builder.Append("{ ");
        foreach (double o in V)
        {
            builder.Append('\"');
            builder.Append(o.ToString());
            builder.Append("\",");
        }
        builder.Append(" }");
        return builder.ToString();
    }
    bool equal_arrays(double[] a, double[] b)
    {
        if (a.Length != b.Length) return false;
        for (int i = 0; i < a.Length; ++i) if (Math.Abs(a[i] - b[i]) > 1e-9) return false;
        return true;
    }
    private void test_case_0() { string[] Arg0 = new string[] { "00" }; string[] Arg1 = new string[] { "00" }; string[] Arg2 = new string[] { "58" }; double[] Arg3 = new double[] { 0.38461538461538464, 0.6153846153846154 }; verify_case(0, Arg3, theProbability(Arg0, Arg1, Arg2)); }
    private void test_case_1() { string[] Arg0 = new string[] { "00", "00" }; string[] Arg1 = new string[] { "00", "00" }; string[] Arg2 = new string[] { "21", "11" }; double[] Arg3 = new double[] { 0.5888888888888889, 0.4111111111111111 }; verify_case(1, Arg3, theProbability(Arg0, Arg1, Arg2)); }
    private void test_case_2() { string[] Arg0 = new string[] { "0000", "0000", "0000" }; string[] Arg1 = new string[] { "2284", "0966", "9334" }; string[] Arg2 = new string[] { "1090", "3942", "4336" }; double[] Arg3 = new double[] { 0.19685958571981937, 0.24397246802233483, 0.31496640865458775, 0.24420153760325805 }; verify_case(2, Arg3, theProbability(Arg0, Arg1, Arg2)); }
    private void test_case_3() { string[] Arg0 = new string[] { "01010110", "00011000", "00001000", "10001010", "10111110" }; string[] Arg1 = new string[] { "22218214", "32244284", "68402430", "18140323", "29043145" }; string[] Arg2 = new string[] { "87688689", "36101317", "69474068", "29337374", "87255881" }; double[] Arg3 = new double[] { 0.11930766223754977, 0.14033271060661345, 0.0652282589028571, 0.14448118133046356, 0.1981894622733832, 0.10743462836879789, 0.16411823601857622, 0.06090786026175882 }; verify_case(3, Arg3, theProbability(Arg0, Arg1, Arg2)); }
    private void test_case_4() { string[] Arg0 = new string[] { "10" }; string[] Arg1 = new string[] { "00" }; string[] Arg2 = new string[] { "00" }; double[] Arg3 = new double[] { 1.0, 0.0 }; verify_case(4, Arg3, theProbability(Arg0, Arg1, Arg2)); }
    private void test_case_5() { string[] Arg0 = new string[] { "00" }; string[] Arg1 = new string[] { "99" }; string[] Arg2 = new string[] { "99" }; double[] Arg3 = new double[] { 0.5, 0.5 }; verify_case(5, Arg3, theProbability(Arg0, Arg1, Arg2)); }
    private void test_case_6()
    {
        string[] Arg0 = new string[] { "11011110110111101101110110010000111110111000011110", "00100100010111001011111111110010100010110000111110", "11110011000011010011110100110101101000000011011001", "10011111010001001011001000010111110110110101101111", "10111011011011111001101000101000111110001111001001", "10000111000011110000000001100011111111001110010000", "01101111111010000010100000010101001000100111001010", "10100010010101100100000100010011110000001100111111", "10010010101000000001100101111000001000000111111101", "10110111011000100111101000111111001010001101010010", "11110100001001110100110011111000010000010111110111", "11000110000110101001110000000000100110110101001111", "11111001000101111111101100001101000010111100011111", "01011001111110110101000010100101000010001111010010", "10000011101011101110010011001101110001110000010001", "01001010101111100101000101010101000100010110111100", "00010110011001001000000100100001111100001000100100", "11011110111010110101101101101110100011001110001000", "11000101000101011000111001101011010101001011111000", "11010010011110001101111011101001000101000001110110", "00011111110010001001101011011101001111011100101101", "01110111101001010110010100011001000001110011101100", "11111011100100000010101101101101111000011110010001", "11000101000000111010011111011111010101000100101010", "01000010010011011001111101010100001010110110000000", "11111000001000101100101111100110110000001101001001", "11010010000011001110101010001011000100001011011011", "11111011111111101111011101111110011110110101111000", "00101110001100101111001011010001011101001000110111", "01101101110001011000010100001010010001000100111100", "11110101101001100111100011111000000001100010111101", "11011101000001101101010111101010001111000110001000", "00100101100110001111110011001110000000000000110100", "10010111000011010111111000000111011001111000100001", "00000101010101101011010110110111011000110011000111", "01101011011101011101000000110000100110100010011101", "00110011111111100111100100000110010111000101001011", "10111110010111110110001000111010000101101101010100", "10010100111111011111010011010101100001011100101111", "01011010000011000101110101010110110101000100111011", "00100000000001001000010011001000011100101101110001", "00111010100110010101111001001111001101101101100001", "01000111000100101111000010110001000110110000100000", "01001011101001101111110010010100101100100011100011", "00011010010100000110101000110001110001110101001000", "11101001100110000000111010001011111000010101000100", "01101011100000111110010110111001110110111010010010", "00001101111000100011011100111000111001101001110010", "10011011111011000000001101100000110110010110110000", "01110010101000111100000011001111110001011000111101" };
        string[] Arg1 = new string[] { "24378499398003660021358130446864931780199223451620", "25621673378570822906210619678473003066195874042932", "85710274374665013612700232337459210306348117777812", "34947475086913741765868450891169342473151220118054", "08337611876598881550777118740817559298950900690172", "40983639137069331580670964927490725396952533436755", "60255585353031628311688762042221234088359056069070", "57328965805472727844633920612539782404869614485228", "77233509666505120762002148782667284714834532657584", "08344167192884649680334506203667446073203770328588", "78801904559991353670794193478477231744302509889435", "52219417383878683841569422741650472146312699509511", "27113814769666796900683897652362358556592722491713", "89008995478320869892403681555079613141740837933082", "07762172136138329018252061055481667201205940429807", "14849603748501723252980612649261842743230149193770", "96727077832136302387616701685577668744744972262237", "42918679789114372736249492224333181086427698138288", "27325853546539405785210009868045800755566280703756", "91929140926613638352429971561647147904321630328279", "41041333306681794312355603675241463063300933767430", "89034644889656516147696607732606349362642115957411", "59173607608515490039625796370526578798285630871204", "17801665526585532193219420536961478616265415647407", "14266708721511905247263287935204994916621418561593", "82529803600275669490756236094878079518115659840188", "49493330425554615364411871265617487168448879685976", "18205068303399720509589284953460372075850663115059", "55389549572388353767450441494889775822825085335910", "42172441404703976598248449555304563671861375657091", "60298902024341958129398611983494521566616309018451", "17912725694033345789989163567515295702712338981835", "71353231120930143418594962911457018148531610311459", "30878661093200754252647439656683580323626226144097", "88447279334085373969672722418775010765763833216036", "51125349074493778594689794667264392125356179560638", "08702076665001544607133853031638869810854826823487", "83163697009202907624400308765454098223749934024342", "72121359640508991965062777156371834499150647536064", "44043814650589396194079088562870784369705960582837", "30777283404663670665174897003794436688647636635867", "03432566273097502330620745523302228043006476523723", "85006784118190645900698599981563206214113300600076", "98619535352986984479973667241982142919120631262222", "91285391621897717448650739248223315045086277649803", "54602818643148967723539358099845264921413326170347", "24337095871605120524885856113537526633349008940221", "74874082905213696439560560335033488176690462706899", "68860523076423504999002531662935100486246680350969", "59418834344820038114200650865881764410209439135262" };
        string[] Arg2 = new string[] { "40173001234191517682360092305165941827077464963387", "16211509281643622181847300011589990504197563841052", "59407907812322256397789136537127440292169262936926", "69182825295571571667066754651659376828700566974251", "83637324199297027491554263382064658777805260141593", "46503920704803358060517425348169681330978366082083", "47065499705913987428955894966325247101470855385072", "93965333233510732818466397120869834863386494180471", "83876367023753403194944279552454181071971260054079", "65308466125257415837373759903161530666601032068800", "87782776880938657030069019488239133168407324959379", "31226490306119938630092158849720502865199652945694", "88488487405343158948907726920313221621732866300994", "92305205640884548599069567607088971293278286783528", "78201633350580251172860663937364470641869660603362", "21937925814013659596592356359453275184522147079541", "04065170594291579956422925978671358921145307707673", "59813223775636958069962537598575295595811763954094", "57584980093505825869547736842947910431558934552431", "38599464686880326691583829146195107774818564609371", "09986210354645774544322376214552333453571249947181", "58531416813068359442687709630765995907175068503685", "59841994579628190798018453214781923553040254364035", "01433204006661539577792773531282205001394749635137", "00854308217240759297825305851729448993169264899913", "18762124338837206249790832112258907362040015215648", "53629303472936278852333014969695465185453672865087", "07280566746752783410689149734460699239217231037562", "38231127827538253060637934098383989335679206659144", "86639580342979963654894953638717447964708307433560", "63533083590367885837785995465238415160704361729617", "71049564887847517313251629767616749763079483848579", "29999091607919209822946465565008634824702043958457", "39183449058739896560876117728676215989968595337192", "77705965815118107660090460866717823550909275665728", "93350715765401961121196851722357146080216278937534", "94832975232486944922098404851930930605830471045491", "87322123265029470400318727013043128864444872262578", "56576294251190385116319976477639871867998280568758", "45949705591364183190102240683000192195680538303838", "02443283341706934708093112374921682225914844319228", "23067358326675509104580813586431554963773924556356", "27017927346358175573208201010116841137366822098858", "54270283198908746150116609872062032982299043371083", "70437949598778449232072992242614544698630667939804", "02940793814631916941215314527333764434349959560365", "39444998191416149566063316101499782389028739354644", "37824891313385469973762336100007650100919433017539", "17809828302541277341945104761172794972441661521917", "61896395235812555466656050782781480640038615670631" };
        double[] Arg3 = new double[] { 0.02095943644745457, 0.021884469064664392, 0.019136250444413826, 0.019797260221161146, 0.020743386415886873, 0.02057612122213531, 0.02373458614629748, 0.022387116627716, 0.01866817586733553, 0.01884133739978823, 0.019595464084685, 0.018301567148659475, 0.019737241866385338, 0.021367837913208315, 0.022447403667182838, 0.017139686594488255, 0.02106904570294306, 0.02274766636546441, 0.020231565516852876, 0.021812467046494182, 0.02078910757634987, 0.0207237472164198, 0.019106245693461966, 0.020148150172553694, 0.018854086585388504, 0.019564730874228307, 0.020703503376079426, 0.021427752270380258, 0.019837051867763834, 0.0200862693780748, 0.019703664984938658, 0.021119397506768115, 0.018305357582209143, 0.021024007439073192, 0.018207416820396973, 0.019244831352516846, 0.01735999091075352, 0.01858368366262646, 0.01849972872788437, 0.017195069774600995, 0.018442477152181832, 0.022766471738005587, 0.017181038030611398, 0.019559824955843835, 0.0208122831889947, 0.021070181955022457, 0.021071881840456004, 0.01862664931471972, 0.018656967469776273, 0.02015034481870268 };
        verify_case(6, Arg3, theProbability(Arg0, Arg1, Arg2));
    }

    // END CUT HERE


    // BEGIN CUT HERE
    [STAThread]
    public static void Main(string[] args)
    {
        RandomApple item = new RandomApple();
        item.run_test(-1);

        double[] prob = item.theProbability(new string[] {
                  "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
                  "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
                  "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
                  "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
                  "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
                  "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
                  "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
                  "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
                  "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
                  "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
                  "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
                  "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
                  "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111"},
        new string[] {
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999"},
        new string[] {
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
                  "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999"});
        Console.WriteLine(item.print_array(prob));
        Console.ReadLine();
    }
    // END CUT HERE
}
