using System;
using System.Collections;
using System.Collections.Generic;

namespace TopCoder.Algorithms {
      public class CheckerFreeness {
            public string isFree(string[] whitex, string[] whitey, string[] blackx, string[] blacky) {
                  return isFree(parse(split(whitex), split(whitey)), parse(split(blackx), split(blacky)));
            }

            private string isFree(Point[] white, Point[] black) {
                  for (int i = 0; i < white.Length; ++i) {
                        for (int j = i + 1; j < white.Length; ++j) {
                              if (possible(white[i], white[j], black)) {
                                    return "NO";
                              }
                        }
                  }
                  return "YES";
            }

            private bool possible(Point a, Point b, Point[] black) {
                  List<Point> pos = new List<Point>();
                  List<Point> neg = new List<Point>();
                  foreach (Point c in black) {
                        long v = vector(a, c, a, b);
                        if (v > 0 || (v < 0 && vector(b, c, b, a) < 0)) {
                              pos.Add(c);
                              continue;
                        }
                        if (v < 0 || (v > 0 && vector(b, c, b, a) > 0)) {
                              neg.Add(c);
                              continue;
                        }
                  }
                  if (pos.Count > 0 && neg.Count > 0) {
                        for (int sign = -1; sign <= +1; sign += 2) {
                              Point best = null;
                              foreach (Point p in pos) {
                                    if (best == null || Math.Sign(vector(a, p, a, best)) == sign) {
                                          best = p;
                                    }
                              }
                              foreach (Point n in neg) {
                                    if (vector(b, n, b, a) > 0) {
                                          if (vector(best, n, best, a) > 0 && vector(best, n, best, b) < 0) {
                                                return true;
                                          }
                                    }
                              }
                        }
                  }
                  return false;
            }

            private long vector(Point a, Point b, Point c, Point d) {
                  return (b.X - a.X) * (d.Y - c.Y) - (b.Y - a.Y) * (d.X - c.X);
            }

            private Point[] parse(string[] x, string[] y) {
                  Point[] result = new Point[x.Length];
                  for (int i = 0; i < result.Length; ++i) {
                        result[i] = new Point(int.Parse(x[i]), int.Parse(y[i]));
                  }
                  return result;
            }

            private string[] split(string[] a) {
                  string result = string.Empty;
                  for (int i = 0; i < a.Length; ++i) {
                        result += a[i];
                  }
                  return result.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
            }

            private class Point {
                  public long X;
                  public long Y;

                  public Point(long x, long y) {
                        X = x;
                        Y = y;
                  }

                  public override string ToString() {
                        return string.Format("({0}, {1})", X, Y);
                  }
            }

            public static void Main(string[] args) {
                  Console.WriteLine(new CheckerFreeness().isFree(
                        new string[] { "4302792 2917286 6288021 6814026 5043474 5556531 69", "00786 3498998 8186682 319739 7071528 224242 904864", "1 2786165 3921334 9522616 3727346 8528367 1685251 ", "2576957 5215522 8443220 6088033 4659373 54512 1176", "293 5868939 4431667 3108996 6476162 9235944 336337", "5 4929233 607457 686920 15231 2316372 8669266 1780", "131 6091833 6351316 1555843 4505823 5452909 861750", "6 430007 6238728 6204005 7339736 7682575 3027352 8", "387429 8258331 2678211 7513006 1938285 9672027 957", "6551 8450392 9138292 7898640 7972777 8201803 56798", "0 4076028 4597134 9563047 4475971 3075181 5882682 ", "549557 8314781 1434489 5742887 2809642 9963548 139", "4625 4512618 4210659 9051610 6499376 1281139 26530", "97 6205547 5777134 9999137 3192565 4982029 2679768", " 8296321 4036667 9525892 9468294 6911348 4231761 2", "719031 882394 7043082 9586355 129653 6619257 64854", "71 7699774 416573 4790408 213862 7600371 1856387 6", "248689 146722 7808306 752873 6607390 4206695 24639", "9 8543366 2348348 2745117 7863232 2687650 4581370 ", "9756413 9561341 4338295 1290055 656081 1972638 827", "9921 6736790 9852087 6409520 5272303 1931933 97082", "55 3228960 3507711 771345 623048 2265725 5085093 4", "670955 7246214 5480634 3869844 2349221 452991 9243", "113 9550578 4945277 9441320 9574528 296984 827825 ", "9452620 2715415 5781968 1436865 9580101 4664744 51", "22837 8456752 3324864 5629901 7153621 5703363 4636", "157 6890757 9900850 3246143 2593037 2733168 412588", "4 4584366 2047762 9827725 3330232 448539 7157121 9", "802754 7802972 5983697 2847074 5073876 2563727 652", "7775 3733774 7789994 9990317 5761814 6739568 87340", "94 2484545 4235464 4919749 2832811 8330185 7303819", " 1603163 6037263 9639669 9057588 3300053 818410 37", "62152 2853468 1714788 3392077 4387701 6746398 5860", "367 4105196 7465570 9534934 5882988 6311644 420663", "2 8523747 3546724 7204309 4635815 7868068 1332714" },
                        new string[] { "6140315 8130531 3158587 1322711 759002 6850395 307", "9026 4847840 4931348 675796 8560388 9175836 292915", "4 9051552 6514852 9085311 2000990 227044 5193252 7", "297776 9911590 6917079 1614650 9228935 1444568 697", "6258 6896830 5908812 6679988 5502208 5372906 24752", "62 1148669 8273599 7108760 8581961 6767031 6832061", " 8398215 1293326 1465322 5153100 6501910 5662878 8", "947677 3060687 3438983 4647551 6860251 2419706 760", "2493 1499429 1724401 9247636 3701117 3155769 20886", "21 4951352 8810800 8854870 3479392 6448783 6520607", " 5547718 6551517 1275927 6528565 6501704 9793719 2", "427359 2177601 3176653 7030278 622408 3549616 2733", "366 7154722 1907397 4705750 8396951 1095654 354217", "1 6879142 6843067 4611658 3171180 4148382 2352801 ", "966101 9398154 3469370 8142634 1949839 2105350 364", "995 3107946 6969296 2224466 8728243 5858556 387593", " 4413192 9435971 2123080 1608198 3911722 5980066 2", "478143 2744620 3507559 4698553 6898459 1026106 126", "3959 2403951 4364706 5765769 3207995 7444833 16056", "02 3363534 9398592 5277734 5477363 9705301 7518778", " 7124243 2291386 6832325 4478699 8280178 665122 53", "46912 9652027 9106250 6735714 4811073 4868223 8102", "69 5142204 7755421 4053427 8002210 8008633 7311109", " 6383298 5336336 1040751 3057696 2713147 8965333 2", "414781 2124403 132250 7502040 9134987 4068506 5712", "263 8905788 6867597 6031885 5202704 5423646 818547", "0 7186270 963695 5905620 515431 6099575 750280 658", "2061 895959 5148895 2003304 5421109 6560425 730673", "9 6070921 7322351 5124291 9300142 7368459 7619227 ", "3095763 275299 6822330 2465775 957714 4731263 9390", "476 5595872 2513154 6962634 9980001 3527256 829061", "0 722852 9418435 2760574 4564342 3887305 1755301 4", "268787 9191473 3593487 6271526 5262737 1533836 475", "3317 2221133 3634220 3765950 5540180 3515723 65840", "18 1570500 3333311 9974206 5694349 2829157 3536114", " 4129520" },
                        new string[] { "3848349 7671355" },
                        new string[] { "3010583 7543679" })); // NO
                  Console.WriteLine(new CheckerFreeness().isFree(
                        new string[] { "3492560 4891505 8751142 6984496 2069615 1329971 85", "2682 2643842 4785239 3237891 19416 7901309 7515040", " 4552415 4152600 3822515 2157484 5570299 7689984 2", "90926 6004591 459300 1987027 7375019 6148281 12778", "84 4807728 352894 4498856 2040665 2285289 39253 41", "37774 5746433 3072807 4551184 1265368 5156985 9546", "09 3599289 1062802 773633 6221014 2916835 2522023 ", "8592181 3417578 5641706 2323282 653341 1515994 799", "99 4121411 2981284 211525 802009 1752215 1823593 2", "66156 7056736 5075223 5643375 1068089 3466683 8488", "055 5666267 3705963 8728330 1956395 7491406 260606", "1 4387758 1239104 1132888 2620491 3051508 5863437 ", "6217696 3846494 2353866 282703 32659 4381699 18427", "97 7382906 511457 3840380 9353390 467841 3033162 3", "536593 9131887 6884240 5196948 7569953 1983225 211", "5638 5154668 5819257 3420483 4745500 863827 398616", "5 1169091 396284 3250070 6684238 5660799 5337719 1", "578795 4480312 895207 4944144 7240440 5838334 4994", "742 4488653 6448946 1999377 8410896 562745 912582 ", "4654629 6321411 5624879 2283774 309301 141567 2743", "573 3224967 7410408 1493630 365001 103941 3668346 ", "3057536 7746184 4814745 4329419 2705122 8775610 15", "21264 7302304 4568860 2200068 1183596 7887891 2010", "38 1088906 6794533 1218027 6573283 511945 664144 3", "096470 411136 7354013 2904348 2148045 1667755 4974", "37 7117122 2149037 4910816 368258 8111927 827839 6", "477408 656127 6881633 4598336 2329219 5254694 4649", "264 6459502 3333803 3250737 5914545 5987380 394390", "0 2354832 713137 1329596 3056111 2240497 1537214 4", "66073 1703540 26743 3016807 1766153 37542 5531030 ", "4234190 3726590 3904054 1821695 8063978 4727079 44", "29979 3730393 1475133 8075182 101980 2565833 69085", "74 2070873 352281 844819 41388 3650205 1406511 458", "7033 5756350 4937574 70958 8948215 6678596 1679231", " 4652501 648711 5699968" },
                        new string[] { "6110623 3021778 1556149 2685137 2374788 1610384 79", "44507 4177154 1580713 1180336 5744349 466906 11191", "71 1588081 3294585 5198701 2364553 429910 1920158 ", "8991826 269616 4308873 4991151 132004 193452 19396", "54 2070886 912707 1389683 834297 2034144 2815363 4", "494856 1233213 508231 5335268 1129777 4251767 3302", "492 883099 8434262 5118096 831198 4675823 719640 2", "054 2305797 2576757 2539838 3178084 4377953 779951", "1 3336887 201565 7756423 3548038 1654692 2892544 9", "80112 310786 903577 3066744 4801839 4366479 928690", " 1260973 2159235 1489901 6236317 2255823 6149159 4", "326461 785743 1857623 4761775 1354003 2541064 4986", "62 157004 907243 5909063 3019496 1509633 5867337 4", "95385 8938071 2584664 586056 6557895 3020191 13157", "89 757432 443938 3010455 2624799 1583153 6555821 4", "211852 3295016 1399820 3505626 1136208 2745236 606", "1416 7392389 4824280 2668467 3002291 1203850 22045", "94 2181024 6789540 1928409 512810 2807849 2466464 ", "1964022 799631 2342622 253968 196931 923867 111964", "8 2762918 238726 4423847 6960706 9242236 6194428 6", "309329 2090414 514560 5478358 3483256 3886370 5863", "758 1503129 1939968 955480 6862813 1340831 7921355", " 1751455 2369096 7118978 6297340 1085193 4076357 6", "927022 50783 660181 1775655 1599338 6930633 528069", "6 2601146 1854481 3098716 2978072 7692140 4386748 ", "3007551 4575284 1476411 1169936 186625 3407358 230", "9302 4146163 58065 4995423 1613454 4083945 1875708", " 2801815 4008641 1304149 554646 439938 2383565 473", "3903 7360983 7830817 3886033 3627957 5536493 50695", "63 5181935 5278868 2644530 4343340 3209943 2050382", " 5222540 4364888 1224225 1668785 176645 5130022 15", "31513 4191940 5472135 1799562 2637069 364798 22373", "72 1497799 5765033 3128546 6819494 153023 174091 4", "588908 2588896 1113731 7967567 1427282 2806949 515", "2463 5066446 4602680 1073009" },
                        new string[] { "1036010 1352256 3211379 7543640 3242412 6434117 81", "76804 9226109 4717653 3338307 5513808 9210131 8047", "705 8981377 9804056 7656503 5328612 3112383 994732", "9 6734037 4260976 7643876 6772867 6836270 4279059 ", "3280417 8319578 6731085 8455521 5759371 6068679 39", "52593 9571322 9262427 7530224 7667879 4551483 4145", "969 9584195 8157357 7047313 5450413 6687959 735397", "1 9799800 6595820 7456029 9846551 2625294 5373452 ", "6246927 2180938 7307301 7666345 7132089 8359393 88", "94944 5783574 7089523 7044495 3201143 4054514 9798", "496 9570012 8092938 4207880 7469436 5054175 877837", "2 8817081 7798492 3620749 2088270 2959967 857527 3", "617187 5013333 8291362 5827045 2386641 8205283 368", "4477 3851516 8308063 9674951 5940869 9979215 53304", "93 7428563 7206564 6652680 1589931 7570828 9848270", " 7094353 9786159 4319068 5643231 6124170 9602356 9", "239061 5807846 8099980 6421138 5965083 5286632 715", "2139 8225585 8838935 9329004 7103021 6442983 99094", "56 8217996 8177883 8389364 4989993 7187472 8828884", " 6271763 5639070 6310514 4381674 8814756 8308320 7", "086282 8121274 9569617 7229931 1811081 9696153 608", "1377 7999315 4462479 9560990 67888 9372989 9286395", " 7233151 6202448 3389179 6471026 8816297 1169203 9", "733956 6180931 4625443 7542927 6652254 1190516 602", "9895 9772368 4262717 3829628 9061212 7827713 60045", "19 3005776 1633723 9761297 1079796 4993270 5102845", " 8983479 5260715 4851183 9078060 8566609 8298850 9", "527890 4760759 4949193 9324352 5489017 9154808 815", "1778 1397490 4937036 3502092 6960327 8889476 92585", "57 2243684 9105535 6636665 6488564 6818395 1711320", " 8301138 3707550 2969008 839424 7634764 2143032 57", "75473 8550178 6679216 3918103 4131164 9778095 5021", "996 6673498 9458478 7596442 8692827 1100003 521278", "3 8390036 6730907 9615150 7609237 4102224 9779801 ", "5821452 5505291 4201145 3195761 5362914 2404202 72", "25716 8280683 5325902" },
                        new string[] { "9586008 9354884 9983165 3294193 9157473 9520578 61", "77642 3009687 8942628 7166259 6171933 9131814 9570", "865 7045074 5819836 3133065 7343796 8459444 607136", "4 8625174 8163879 9218035 3685493 4794764 9237081 ", "9311171 7015081 8921703 4699357 7687028 6380592 59", "57598 7364736 6610234 7187775 4462055 9779168 9130", "201 8485358 9266497 6075508 7732695 7829296 446317", "5 5307933 4948548 8802025 5277187 8374883 9344289 ", "6315497 9483020 5684139 5136408 8515155 3933286 37", "08523 7818256 3219414 6994985 9933928 7229458 2676", "110 6704296 9492520 7429444 5648506 6184713 558216", "0 4163738 5878132 8294294 7576200 9845175 9441913 ", "6867620 9175193 8645401 6222655 9550367 2224094 95", "27949 6567994 6358615 9882232 9122597 6348751 7365", "056 9774788 8467822 3614403 9314588 5371753 659745", "2 6700080 3250794 8116146 7433409 7245301 3610621 ", "1488468 4896822 6596652 5658839 7135092 9942473 82", "99810 2303715 7243687 3783007 4294948 9023438 9159", "798 8913499 3422109 6554941 7449787 4849226 976945", "0 9510764 7275990 5813015 5819625 2928866 6894003 ", "3551502 4922694 9767731 6464978 8008838 8163857 53", "05304 9823342 6286485 9475428 9933463 9335147 3046", "299 8520194 8026299 9425957 6677605 3719742 932248", "6 2018659 3986967 8965939 8916959 6308135 9434011 ", "8296708 7988916 9823102 9039652 9727256 8122704 84", "57216 8800294 8014198 8389670 8748763 7198176 6038", "996 6686576 7752244 5683596 3952796 2878179 506237", "8 1752632 5311879 8919989 2915136 7914890 7970770 ", "4689606 8851059 5885944 7174476 9067865 8883905 67", "87758 7447743 8790133 8424979 6457378 5511346 9065", "125 5004673 6508842 8951367 9477197 4304124 873385", "4 6934309 7202904 5040791 7049248 7737859 4171277 ", "8516592 8566846 3066394 6059203 6676449 9401446 53", "99453 8658196 8709584 9354618 2834865 7505750 1852", "754 5005336 9237245 6075015 9859591 6925882 793625",
                              "4 5631013 2876347 7619524" })); // YES
                  Console.WriteLine(new CheckerFreeness().isFree(
                        new string[] { "8969136 4585167" }, new string[] { "3849765 4202527" }, new string[] { "8969209 4585094" }, new string[] { "3849765 4202527" })); // NO
                  Console.WriteLine(new CheckerFreeness().isFree(
                        new string[] { "7500 7500" }, new string[] { "5000 10000" }, new string[] { "10000 5000" }, new string[] { "10000 5000" })); // NO
                  Console.WriteLine(new CheckerFreeness().isFree(
                        new string[] { "1 2" }, new string[] { "2 1" }, new string[] { "1 2" }, new string[] { "1 2" })); // NO
                  Console.WriteLine(new CheckerFreeness().isFree(
                        new string[] { "2", "5", "3", " ", "1", "7", "3" }, new string[] { "180 254" }, new string[] { "32", "5 1", "42" }, new string[] { "462 423" })); // YES
                  Console.WriteLine(new CheckerFreeness().isFree(
                        new string[] { "1 10000000 9999999" }, new string[] { "1 9999999 1" }, new string[] { "2 5000000 9999998" }, new string[] { "2 5000001 9999999" })); // YES
                  Console.WriteLine(new CheckerFreeness().isFree(
                        new string[] { "1" }, new string[] { "2" }, new string[] { "3" }, new string[] { "4" })); // YES
                  Console.WriteLine(new CheckerFreeness().isFree(
                        new string[] { "6115 9723 3794 2275 2268 2702 3657 915 7953 2743 7", "716 9645 2547 9490 9365 326 6601 5215 6771 7153 72", "93 5922 714 2258 4369 9524 302 8417 6620 1143" },
                        new string[] { "621 1611 7140 503 5345 7202 681 4908 2510 5908 279", "6 6286 6873 6682 9197 6710 8517 1913 7784 8533 665", "4 446 3561 7241 6168 2025 4739 9501 5340 6446" },
                        new string[] { "6833 131 4151 1776 1959 7210 1903 6107 598 6220 94", "24 5374 6718 2919 6068 6644 5070 710 7121 1630 370", "3 1051 5739 9294 8798 3371 8107 2130 6608 534" },
                        new string[] { "7496 2412 2801 3473 5810 2714 7853 9714 5470 3558 ", "8143 2391 8234 7292 9311 1636 8978 1107 2262 9175 ",
                              "7259 8842 5294 7209 2317 3825 3413 820 3774 5393" })); // NO
                  Console.WriteLine(new CheckerFreeness().isFree(
                        new string[] {"219211 1996214 1706774 3634920 909831 1774128 8503","52 2233050 2099138 3380396 1128982 3682525 1483700"," 763080 487867 8203 1791027 463556 1103323 1406861",
                              " 6374234 760949 4340236 727393 2073832 1289052 103","8147 4448130 151066 412440 1068735 377239 2677933 ","1299598 339843 289973 3707319 555280 230418 431719"},
                        new string[] {"1638083 5698739 3105504 9726902 9745795 5049444 15","80592 3952120 6606668 7460527 7239299 8726128 4913","547 6264100 5701660 8865937 4969114 8014845 327236",
                              "1 6389154 9739755 2561669 9412417 5452337 3150506 ","5832197 1571976 8779325 3306446 948271 5133709 949","394 6919798 7525636 3568024 6833196 9237472 733313","1 9939064 9720014"},
                        new string[] {"5860334 8007503 7455523 4864927 9573526 2718360 81","12104 6684287 9921506 4840886 5415948 3451454 5320","996 9268757 9261724 8254668 2292750 8035828 233352",
                              "1 7676906 5234406 8533320 6562751 4884098 4971897 ","5569360 8519168 3100295 9351613 7733878 7579030 32","46775 7297460 8370542 7099759 5782969 2978083 3390","488 7482758 1332401 6094629 9717305 5503121 572842",
                              "1 4903563 6331656 2867455 3410007 7751527 7228221 ","4111694 5171296 6847697 4601273 7599828 5515929 94","60593 9332762 5389080 4512091 8668538 5711743 5838",
                              "534 4825079 8145628 3810005 2964724 5594550 785748","3 6283769"},
                        new string[] {"5911694 8009943 212555 5838688 9896256 607434 5857","663 4616750 1477573 7168026 3090917 4379806 326465","7 4189076 2104028 3279691 94211 8503556 78457 4394",
                              "360 3344176 3223317 2624498 4883494 1532240 732937","1 1518674 1353567 892134 5536454 8527392 2603965 6","623264 8830827 2030444 3002706 83058 4475866 20876",
                              "25 1790695 4034441 5409379 3571098 4600050 736561 ","250475 3733256 3011439 2144994 4523046 3119883 607","582 8361403 6525451 7518329 926803 4884524 8424659"," 7088689 5762049 9532481 4914186 7314621 4339084 3",
                              "741685 3837953 3177252 612550 9688871 5872931"})); // YES

                  Console.WriteLine("Press any key to continue...");
                  Console.ReadLine();
            }
      }
}