using System;

    class ModularInequality
    {
        public int countSolutions(int[] a, int p)
        {
            Array.Sort(a);
            int n = a.Length, result = 0;
            int prev = -2000000000;
            for (int i = 0; i < n; ++i)
            {
                int x = a[i];
                if (x == prev)
                {
                    continue;
                }
                prev = x;
                long sum = 0;
                for (int j = 0; j < n; ++j)
                {
                    sum += Math.Abs(a[j] - x);
                }
                result += (sum <= p ? 1 : 0);
            }
            long[] suma = new long[n];
            suma[0] = a[0];
            for (int i = 1; i < n; ++i)
            {
                suma[i] = a[i] + suma[i - 1];
            }
            long l, r;
            for (int i = 0; i <= n; ++ i)
            {
                l = 1;
                r = 0;
                if (i == 0)
                {
                    l = (suma[n - 1] - p) / n;
                    if ((suma[n - 1] - p) % n != 0)
                    {
                        l += (suma[n - 1] - p > 0 ? 1 : 0);
                    }
                    r = a[0] - 1;
                }
                else if (i == n)
                {
                    r = (p + suma[n - 1]) / n;
                    if ((p + suma[n - 1]) % n != 0)
                    {
                        r -= (p + suma[n - 1] < 0 ? 1 : 0);
                    }
                    l = a[n - 1] + 1;
                }
                else if (a[i - 1] + 1 <= a[i] - 1)
                {
                    long sum = p - (suma[n - 1] - 2 * suma[i - 1]);
                    int k = 2 * i - n;
                    if (k < 0)
                    {
                        k = -k;
                        sum = -sum;
                        long d = sum / k;
                        if (sum % k != 0)
                        {
                            d += (sum > 0 ? 1 : 0);
                        }
                        l = Math.Max(a[i - 1] + 1, d);
                        r = a[i] - 1;
                    }
                    else if (k > 0)
                    {
                        long d = sum / k;
                        if (sum % k != 0)
                        {
                            d -= (sum < 0 ? 1 : 0);
                        }
                        l = a[i - 1] + 1;
                        r = Math.Min(a[i] - 1, d);
                    }
                    else
                    {
                        if (suma[n - 1] - 2 * suma[i - 1] <= p)
                        {
                            l = a[i - 1] + 1;
                            r = a[i] - 1;
                        }
                    }
                }
                result += (int)(l <= r ? r - l + 1 : 0);
            }
            return result;
        }
        static void Main(string[] args)
        {
            ModularInequality mi = new ModularInequality();
            Console.WriteLine(mi.countSolutions(new int[] { 1, 2, 3 }, 6));
            Console.WriteLine(mi.countSolutions(new int[] { 10, 30, 15, -1, 17 }, 42));
            Console.WriteLine(mi.countSolutions(new int[] { 0, 2, 3, -5, 10 }, 17));
            Console.WriteLine(mi.countSolutions(new int[] { -693 }, 1265));
            Console.WriteLine(mi.countSolutions(new int[] { 965, -938, -396, -142, 926, 31, -720 }, 6495));
            Console.WriteLine(mi.countSolutions(new int[] {}, 50));
            Console.WriteLine(mi.countSolutions(new int[] { 0, 0 }, 0));
            Console.WriteLine(mi.countSolutions(new int[] { -7650415, 7957051, -6569438, 5135779, 620179, -17187772, -8970381, -15151919, 5003330, -18762643, 1975701, -14161806, -10343088, 14815548, 351143, -4356695, 2618998, -11113480, -12324206, -12208606, 7795936, -4590717, -16238338, 18124451, 5598399, 3859910, 14294587, 15735534, -18309033, 1411882, -10131963, -12233944, -2609566, -7984120, 13676679, -17049965, -17976467, 14000495, -10931982, 15465770, -3625103, 14290634, 16926887, -12229819, 10809587, -19575775, -3217416, -11792374, 12341822, 9242686 }, 580088479));
            Console.WriteLine(mi.countSolutions(new int[] { 965, -938, -396, -142, 926, 31, -720 }, 1000000000));
            Console.WriteLine(mi.countSolutions(new int[] { 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 
                1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 
                1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, -1000000000, -1000000000, -1000000000, 
                -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, 
                -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, 
                -1000000000, -1000000000, -1000000000, -1000000000 }, 0));
            Console.WriteLine(mi.countSolutions(new int[] { -879021, -677543, -972125}, 955336));
            Console.ReadLine();
            
        }
    }
